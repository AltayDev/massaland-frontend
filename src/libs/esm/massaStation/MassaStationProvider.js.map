{"version":3,"file":"MassaStationProvider.js","sourceRoot":"","sources":["../../../src/massaStation/MassaStationProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EAccountDeletionResponse,\n  IAccountDeletionResponse,\n} from '../provider/AccountDeletion';\nimport {\n  IAccountImportResponse,\n  EAccountImportResponse,\n  IAccountImportRequest,\n} from '../provider/AccountImport';\nimport { INetwork, IProvider } from '../provider/IProvider';\nimport {\n  JsonRpcResponseData,\n  deleteRequest,\n  getRequest,\n  postRequest,\n  putRequest,\n} from './RequestHandler';\nimport { MassaStationAccount } from './MassaStationAccount';\nimport { IAccount } from '../account/IAccount';\nimport { IAccountDetails } from '../account';\nimport { PluginInfo, getNetworkInfoBody } from './types';\nimport EventEmitter from 'events';\n\n/**\n * MassaStation url\n */\nexport const MASSA_STATION_URL = 'https://station.massa/';\n\n/**\n * The MassaStation accounts url\n */\nexport const MASSA_STATION_ACCOUNTS_URL = `${MASSA_STATION_URL}plugin/massa-labs/massa-wallet/api/accounts`;\n\n/**\n * MassaStation's url for importing accounts\n */\nexport const MASSA_STATION_IMPORT_ACCOUNTS_URL = `${MASSA_STATION_ACCOUNTS_URL}/import/`;\n\n/**\n * MassaStation's wallet provider name\n */\nexport const MASSA_STATION_PROVIDER_NAME = 'MASSASTATION';\n\n/**\n * Events emitted by MassaStation\n */\nconst MASSA_STATION_NETWORK_CHANGED = 'MASSA_STATION_NETWORK_CHANGED';\n\n/**\n * This interface represents the payload returned by making a call to MassaStation's accounts url.\n */\nexport interface IMassaStationWallet {\n  address: string;\n  nickname: string;\n  keyPair: {\n    nonce: string;\n    privateKey: string;\n    publicKey: string;\n    salt: string;\n  };\n  status: MassaStationAccountStatus;\n}\n\nenum MassaStationAccountStatus {\n  OK = 'ok',\n  CORRUPTED = 'corrupted',\n}\n\n/**\n * This class provides an implementation for communicating with the MassaStation wallet provider.\n * @remarks\n * This class is used as a proxy to the MassaStation server for exchanging message over https calls.\n */\nexport class MassaStationProvider implements IProvider {\n  private providerName = MASSA_STATION_PROVIDER_NAME;\n\n  private massaStationEventsListener = new EventEmitter();\n  private currentNetwork: INetwork;\n\n  /**\n   * Provider constructor\n   *\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Provider class.\n   */\n  public constructor(private infos: PluginInfo) {}\n\n  /**\n   * This method returns the name of the provider.\n   * @returns The name of the provider.\n   */\n  public name(): string {\n    return this.providerName;\n  }\n\n  /**\n   * This method sends a message to the MassaStation server to get the list of accounts for the provider.\n   * It returns a Promise that resolves to an array of Account instances.\n   *\n   * @returns A promise that resolves to an array of Account instances.\n   */\n  public async accounts(): Promise<IAccount[]> {\n    let massaStationAccountsResponse: JsonRpcResponseData<\n      Array<IMassaStationWallet>\n    > = null;\n    try {\n      massaStationAccountsResponse = await getRequest<\n        Array<IMassaStationWallet>\n      >(MASSA_STATION_ACCOUNTS_URL);\n    } catch (ex) {\n      console.error(`MassaStation accounts retrieval error`);\n      throw ex;\n    }\n    if (\n      massaStationAccountsResponse.isError ||\n      massaStationAccountsResponse.error\n    ) {\n      throw massaStationAccountsResponse.error.message;\n    }\n    return massaStationAccountsResponse.result\n      .filter((massaStationAccount) => {\n        return massaStationAccount.status === MassaStationAccountStatus.OK;\n      })\n      .map((massaStationAccount) => {\n        return new MassaStationAccount(\n          {\n            address: massaStationAccount.address,\n            name: massaStationAccount.nickname,\n          },\n          this.providerName,\n        );\n      });\n  }\n\n  /**\n   * This method makes an http call to the MassaStation server to import an account with\n   * the given publicKey and privateKey.\n   *\n   * @param publicKey - The public key of the account.\n   * @param privateKey - The private key of the account.\n   *\n   * @returns a Promise that resolves to an instance of IAccountImportResponse.\n   */\n  public async importAccount(\n    publicKey: string,\n    privateKey: string,\n  ): Promise<IAccountImportResponse> {\n    const accountImportRequest: IAccountImportRequest = {\n      publicKey,\n      privateKey,\n    };\n    let massaStationAccountsResponse: JsonRpcResponseData<unknown> = null;\n    try {\n      massaStationAccountsResponse = await putRequest<unknown>(\n        MASSA_STATION_ACCOUNTS_URL,\n        accountImportRequest,\n      );\n    } catch (ex) {\n      console.log(`MassaStation accounts retrieval error: ${ex}`);\n      throw ex;\n    }\n    if (\n      massaStationAccountsResponse.isError ||\n      massaStationAccountsResponse.error\n    ) {\n      throw massaStationAccountsResponse.error.message;\n    }\n    return {\n      response: EAccountImportResponse.OK,\n      message: 'Account imported successfully',\n    } as IAccountImportResponse;\n  }\n\n  /**\n   * This method sends an http call to the MassaStation server to delete the account associated with the given address.\n   *\n   * @param address - The address of the account.\n   * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n   */\n  public async deleteAccount(\n    address: string,\n  ): Promise<IAccountDeletionResponse> {\n    // get all accounts\n    let allAccounts: JsonRpcResponseData<Array<IMassaStationWallet>> = null;\n    try {\n      allAccounts = await getRequest<Array<IMassaStationWallet>>(\n        MASSA_STATION_ACCOUNTS_URL,\n      );\n    } catch (ex) {\n      console.log(`MassaStation accounts retrieval error: ${ex}`);\n      throw ex;\n    }\n    if (allAccounts.isError || allAccounts.error) {\n      throw allAccounts.error.message;\n    }\n    // find the account with the desired address\n    const accountToDelete = allAccounts.result.find(\n      (account) => account.address.toLowerCase() === address.toLowerCase(),\n    );\n\n    // delete the account in question\n    let massaStationAccountsResponse: JsonRpcResponseData<unknown> = null;\n    try {\n      massaStationAccountsResponse = await deleteRequest<unknown>(\n        `${MASSA_STATION_ACCOUNTS_URL}/${accountToDelete.nickname}`,\n      );\n    } catch (ex) {\n      console.log(`MassaStation accounts deletion error`, ex);\n      return {\n        response: EAccountDeletionResponse.ERROR,\n      } as IAccountDeletionResponse;\n    }\n    if (\n      massaStationAccountsResponse.isError ||\n      massaStationAccountsResponse.error\n    ) {\n      console.log(\n        `MassaStation accounts deletion error`,\n        massaStationAccountsResponse.error.message,\n      );\n      return {\n        response: EAccountDeletionResponse.ERROR,\n      } as IAccountDeletionResponse;\n    }\n    return {\n      response: EAccountDeletionResponse.OK,\n    } as IAccountDeletionResponse;\n  }\n\n  /**\n   * This method sends an http call to the MassaStation server to obtain node urls.\n   *\n   * @throws an error if the call fails.\n   *\n   * @returns a Promise that resolves to a list of node urls.\n   */\n  public async getNodesUrls(): Promise<string[]> {\n    let nodesResponse: JsonRpcResponseData<unknown> = null;\n    try {\n      nodesResponse = await getRequest<unknown>(\n        `${MASSA_STATION_URL}massa/node`,\n      );\n      if (nodesResponse.isError || nodesResponse.error) {\n        throw nodesResponse.error.message;\n      }\n      // transform nodesResponse.result to a json and then get the \"url\" property\n      const nodes = nodesResponse.result as { url: string };\n      return Array(nodes.url);\n    } catch (ex) {\n      console.error(`MassaStation nodes retrieval error`, ex);\n      throw ex;\n    }\n  }\n\n  /**\n   * Returns the name of the network MassaStation is connected to.\n   *\n   * @throws an error if the call fails.\n   *\n   * @returns a Promise that resolves to a network.\n   */\n  public async getNetwork(): Promise<string> {\n    try {\n      const nodesResponse = await getRequest<getNetworkInfoBody>(\n        `${MASSA_STATION_URL}massa/node`,\n      );\n      if (nodesResponse.isError || nodesResponse.error) {\n        throw nodesResponse.error.message;\n      }\n\n      if (this.currentNetwork?.name !== nodesResponse.result.network) {\n        this.currentNetwork = {\n          name: nodesResponse.result.network,\n          url: nodesResponse.result.url,\n          chainId: BigInt(nodesResponse.result.chainId),\n        };\n      }\n      const nodes = nodesResponse.result as { network: string };\n\n      return nodes.network;\n    } catch (ex) {\n      console.error(`MassaStation nodes retrieval error`, ex);\n      throw ex;\n    }\n  }\n\n  /**\n   * This method sends an http call to the MassaStation server to create a new random account.\n   *\n   * @returns a Promise that resolves to the details of the newly generated account.\n   */\n  public async generateNewAccount(name: string): Promise<IAccountDetails> {\n    let massaStationAccountsResponse: JsonRpcResponseData<IMassaStationWallet> =\n      null;\n    console.log(MASSA_STATION_ACCOUNTS_URL + '/' + name);\n    try {\n      massaStationAccountsResponse = await postRequest<IMassaStationWallet>(\n        MASSA_STATION_ACCOUNTS_URL + '/' + name,\n        {},\n      );\n      if (\n        massaStationAccountsResponse.isError ||\n        massaStationAccountsResponse.error\n      ) {\n        throw massaStationAccountsResponse.error.message;\n      }\n      return {\n        address: massaStationAccountsResponse.result.address,\n        name: massaStationAccountsResponse.result.nickname,\n      } as IAccountDetails;\n    } catch (ex) {\n      console.error(`Error while generating account: ${ex}`);\n      throw ex;\n    }\n  }\n\n  public listenAccountChanges(\n    callback: (address: string) => void,\n  ): { unsubscribe: () => void } | undefined {\n    throw new Error(\n      'listenAccountChanges is not yet implemented for the current provider.',\n    );\n  }\n\n  public listenNetworkChanges(\n    callback: (network: string) => void,\n  ): { unsubscribe: () => void } | undefined {\n    this.massaStationEventsListener.on(MASSA_STATION_NETWORK_CHANGED, (evt) =>\n      callback(evt),\n    );\n\n    // check periodically if network changed\n    const intervalId = setInterval(async () => {\n      const currentNetwork = this.currentNetwork?.name;\n      const network = await this.getNetwork();\n      if (currentNetwork !== network) {\n        this.massaStationEventsListener.emit(\n          MASSA_STATION_NETWORK_CHANGED,\n          network,\n        );\n      }\n    }, 500);\n\n    return {\n      unsubscribe: () => {\n        clearInterval(intervalId);\n        this.massaStationEventsListener.removeListener(\n          MASSA_STATION_NETWORK_CHANGED,\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          () => {},\n        );\n      },\n    };\n  }\n\n  public async connect(): Promise<boolean> {\n    throw new Error(\n      'connect functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public async disconnect(): Promise<boolean> {\n    throw new Error(\n      'disconnect functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public connected(): boolean {\n    throw new Error(\n      'connected functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public enabled(): boolean {\n    throw new Error(\n      'enabled functionality is not yet implemented for the current provider.',\n    );\n  }\n}\n"]}