{"version":3,"file":"MassaStationAccount.js","sourceRoot":"","sources":["../../../src/massaStation/MassaStationAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IAccountBalanceResponse,\n  IAccountDetails,\n  IAccountSignResponse,\n  ITransactionDetails,\n} from '..';\nimport { IAccount } from '../account/IAccount';\nimport { JsonRpcResponseData, getRequest, postRequest } from './RequestHandler';\nimport {\n  MASSA_STATION_URL,\n  MASSA_STATION_ACCOUNTS_URL,\n} from './MassaStationProvider';\nimport {\n  Args,\n  IContractReadOperationData,\n  IContractReadOperationResponse,\n  MAX_GAS_CALL,\n} from '@massalabs/web3-utils';\n\nimport { argsToBase64, uint8ArrayToBase64 } from '../utils/argsToBase64';\nimport { IAccountSignOutput, ISignMessage } from '../account/AccountSign';\nimport { encode as base58Encode } from 'bs58check';\nimport { ExecuteFunctionBody } from './types';\n\n/**\n * The maximum allowed gas for a read operation\n */\nconst MAX_READ_BLOCK_GAS = BigInt(4_294_967_295);\n\n/**\n * This interface represents the payload returned by making a call to MassaStation's sign\n * operation `/signOperation` url.\n */\ninterface ISignOperation {\n  operation: string;\n  batch?: boolean;\n  correlationId?: string;\n}\n\n/**\n * This interface represents the the individual wallet's final and pending balances returned by MassaStation\n */\ninterface IBalance {\n  final: string;\n  pending: string;\n}\n\n/**\n * This interface represents the payload returned by making a call to MassaStation's get balances url.\n */\ninterface IAddressesBalances {\n  addressesAttributes: {\n    [key: string]: { balance: IBalance };\n  };\n}\n\n/**\n * This module contains the MassaStationAccount class. It is responsible for representing an account in\n * the MassaStation wallet.\n *\n * @remarks\n * This class provides methods to interact with MassaStation account's {@link balance} and to {@link sign} messages.\n *\n */\nexport class MassaStationAccount implements IAccount {\n  private _providerName: string;\n  private _address: string;\n  private _name: string;\n\n  /**\n   * This constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   *\n   * @param address - The address of the account.\n   * @param name - The name of the account.\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Account class.\n   *\n   * @remarks\n   * - The Account constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   * - The IAccountDetails object contains the account's address and name.\n   * - The providerName string identifies the provider that is used to interact with the blockchain.\n   */\n  public constructor({ address, name }: IAccountDetails, providerName: string) {\n    this._address = address;\n    this._name = name;\n    this._providerName = providerName;\n  }\n\n  /**\n   * @returns The address of the account.\n   */\n  public address(): string {\n    return this._address;\n  }\n\n  /**\n   * @returns The name of the account.\n   */\n  public name(): string {\n    return this._name;\n  }\n\n  /**\n   * @returns The name of the provider.\n   */\n  public providerName(): string {\n    return this._providerName;\n  }\n\n  /**\n   * This method aims to retrieve the account's balance.\n   *\n   * @returns A promise that resolves to an object of type IAccountBalanceResponse. It contains the account's balance.\n   */\n  public async balance(): Promise<IAccountBalanceResponse> {\n    let signOpResponse: JsonRpcResponseData<IAddressesBalances> = null;\n    try {\n      signOpResponse = await getRequest<IAddressesBalances>(\n        `${MASSA_STATION_URL}massa/addresses?attributes=balance&addresses=${this._address}`,\n      );\n    } catch (ex) {\n      console.error(`MassaStation account balance error`);\n      throw ex;\n    }\n    if (signOpResponse.isError || signOpResponse.error) {\n      throw signOpResponse.error;\n    }\n    const balance: IBalance =\n      signOpResponse.result.addressesAttributes[this._address].balance;\n    return {\n      finalBalance: balance.final,\n      candidateBalance: balance.pending,\n    };\n  }\n\n  /**\n   * This method aims to sign an operation.\n   *\n   * @param data - The operation data to be signed.\n   * @returns An IAccountSignResponse object. It contains the signature of the message.\n   */\n  public async sign(\n    data: Buffer | Uint8Array | string,\n  ): Promise<IAccountSignOutput> {\n    let signOpResponse: JsonRpcResponseData<IAccountSignResponse> = null;\n\n    // TODO: Massa Station has 2 endpoints sign (to sign operation) and signMessage (to sign a message).\n    // To fix the current implementation we provide a dumb description and set DisplayData to true but it\n    // must this feature must be implemented in the future.\n    const signData: ISignMessage = {\n      description: '',\n      message: data.toString(),\n      DisplayData: true,\n    };\n\n    try {\n      signOpResponse = await postRequest<IAccountSignResponse>(\n        `${MASSA_STATION_ACCOUNTS_URL}/${this._name}/signMessage`,\n        signData,\n      );\n    } catch (ex) {\n      console.error(`MassaStation account signing error`);\n      throw ex;\n    }\n\n    if (signOpResponse.isError || signOpResponse.error) {\n      throw signOpResponse.error;\n    }\n\n    const signature = base58Encode(\n      Buffer.from(signOpResponse.result.signature, 'base64'),\n    );\n\n    return {\n      publicKey: signOpResponse.result.publicKey,\n      base58Encoded: signature,\n    };\n  }\n\n  /**\n   * This method aims to buy rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be bought.\n   * @param fee - The fee to be paid for the transaction execution by the node.\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  public async buyRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    let buyRollsOpResponse: JsonRpcResponseData<ITransactionDetails> = null;\n    const url = `${MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      side: 'buy',\n    };\n    try {\n      buyRollsOpResponse = await postRequest<ITransactionDetails>(url, body);\n    } catch (ex) {\n      console.error(`MassaStation account: error while buying rolls: ${ex}`);\n      throw ex;\n    }\n    if (buyRollsOpResponse.isError || buyRollsOpResponse.error) {\n      throw buyRollsOpResponse.error;\n    }\n    return buyRollsOpResponse.result;\n  }\n\n  /**\n   * This method aims to sell rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be sold.\n   * @param fee - The fee to be paid for the transaction execution by the node.\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  public async sellRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    let sellRollsOpResponse: JsonRpcResponseData<ITransactionDetails> = null;\n    const url = `${MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      side: 'sell',\n    };\n    try {\n      sellRollsOpResponse = await postRequest<ITransactionDetails>(url, body);\n    } catch (ex) {\n      console.error(`MassaStation account: error while selling rolls: ${ex}`);\n      throw ex;\n    }\n    if (sellRollsOpResponse.isError || sellRollsOpResponse.error) {\n      throw sellRollsOpResponse.error;\n    }\n    return sellRollsOpResponse.result;\n  }\n\n  /**\n   * This method aims to transfer MAS on behalf of the sender to a recipient.\n   *\n   * @param amount - The amount of MAS (in the smallest unit) to be transferred.\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async sendTransaction(\n    amount: bigint,\n    recipientAddress: string,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    let sendTxOpResponse: JsonRpcResponseData<ITransactionDetails> = null;\n    const url = `${MASSA_STATION_ACCOUNTS_URL}/${this._name}/transfer`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      recipientAddress: recipientAddress,\n    };\n\n    try {\n      sendTxOpResponse = await postRequest<ITransactionDetails>(url, body);\n    } catch (ex) {\n      console.error(\n        `MassaStation account: error while sending transaction: ${ex}`,\n      );\n      throw ex;\n    }\n    if (sendTxOpResponse.isError || sendTxOpResponse.error) {\n      throw sendTxOpResponse.error;\n    }\n    return sendTxOpResponse.result;\n  }\n\n  /**\n   * This method aims to interact with a smart contract deployed on the MASSA blockchain.\n   *\n   * @remarks\n   * If dryRun.dryRun is true, the method will dry run the smart contract call and return an\n   * IContractReadOperationResponse object which contains all the information about the dry run\n   * (state changes, gas used, etc.)\n   *\n   * @param contractAddress - The address of the smart contract.\n   * @param functionName - The name of the function to be called.\n   * @param parameter - The parameters as an Args object to be passed to the function.\n   * @param amount - The amount of MASSA coins to be sent to the contract (in the smallest unit).\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @param maxGas - The maximum amount of gas to be used for the transaction execution.\n   * @param nonPersistentExecution - The dryRun object to be passed to the function.\n   *\n   * @returns if 'nonPersistentExecution' is true, it returns an IContractReadOperationResponse object.\n   * Otherwise, it returns an ITransactionDetails object which contains the operationId on the network.\n   *\n   */\n  public async callSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Uint8Array | Args,\n    coins: bigint,\n    fee?: bigint,\n    maxGas?: bigint,\n    nonPersistentExecution = false,\n  ): Promise<ITransactionDetails | IContractReadOperationResponse> {\n    if (nonPersistentExecution) {\n      return this.nonPersistentCallSC(\n        contractAddress,\n        functionName,\n        parameter,\n        maxGas,\n      );\n    }\n    // convert parameter to base64\n    let args = '';\n    if (parameter instanceof Uint8Array) {\n      args = uint8ArrayToBase64(parameter);\n    } else {\n      args = argsToBase64(parameter);\n    }\n    let CallSCOpResponse: JsonRpcResponseData<ITransactionDetails> = null;\n    const url = `${MASSA_STATION_URL}cmd/executeFunction`;\n    const body: ExecuteFunctionBody = {\n      nickname: this._name,\n      name: functionName,\n      at: contractAddress,\n      args,\n      coins: Number(coins),\n      fee: fee ? fee.toString() : '0',\n      // If maxGas is not provided, estimation will be done by MS\n      maxGas: maxGas ? maxGas.toString() : '',\n      async: true,\n    };\n    try {\n      CallSCOpResponse = await postRequest<ITransactionDetails>(url, body);\n    } catch (ex) {\n      console.log(\n        `MassaStation account: error while interacting with smart contract: ${ex}`,\n      );\n      throw ex;\n    }\n    if (CallSCOpResponse.isError || CallSCOpResponse.error) {\n      throw CallSCOpResponse.error;\n    }\n    return CallSCOpResponse.result;\n  }\n\n  public async getNodeUrlFromMassaStation(): Promise<string> {\n    // get the node url from MassaStation\n    let nodesResponse: JsonRpcResponseData<unknown> = null;\n    let node = '';\n    try {\n      nodesResponse = await getRequest<unknown>(\n        `${MASSA_STATION_URL}massa/node`,\n      );\n      if (nodesResponse.isError || nodesResponse.error) {\n        throw nodesResponse.error.message;\n      }\n      // transform nodesResponse.result to a json and then get the \"url\" property\n      const nodes = nodesResponse.result as { url: string };\n      node = nodes.url;\n    } catch (ex) {\n      throw new Error(`MassaStation nodes retrieval error: ${ex}`);\n    }\n    return node;\n  }\n\n  public async nonPersistentCallSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Uint8Array | Args,\n    maxGas?: bigint,\n  ): Promise<IContractReadOperationResponse> {\n    const node = await this.getNodeUrlFromMassaStation();\n    // Gas amount check\n    if (maxGas > MAX_READ_BLOCK_GAS) {\n      throw new Error(\n        `\n        The gas submitted ${maxGas.toString()} exceeds the max. allowed block gas of \n        ${MAX_READ_BLOCK_GAS.toString()}\n        `,\n      );\n    }\n\n    // convert parameter to an array of numbers\n    let argumentArray = [];\n    if (parameter instanceof Uint8Array) {\n      argumentArray = Array.from(parameter);\n    } else {\n      argumentArray = Array.from(parameter.serialize());\n    }\n    // setup the request body\n    const data = {\n      max_gas: maxGas ? Number(maxGas) : MAX_GAS_CALL,\n      target_address: contractAddress,\n      target_function: functionName,\n      parameter: argumentArray,\n      caller_address: this._address,\n    };\n    const body = [\n      {\n        jsonrpc: '2.0',\n        method: 'execute_read_only_call',\n        params: [[data]],\n        id: 0,\n      },\n    ];\n    // returns operation ids\n    let jsonRpcCallResult: Array<IContractReadOperationData> = [];\n    try {\n      let resp = await postRequest<Array<IContractReadOperationData>>(\n        node,\n        body,\n      );\n      if (resp.isError || resp.error) {\n        throw resp.error.message;\n      }\n      jsonRpcCallResult = resp.result;\n    } catch (ex) {\n      throw new Error(\n        `MassaStation account: error while interacting with smart contract: ${ex}`,\n      );\n    }\n    if (jsonRpcCallResult.length <= 0) {\n      throw new Error(\n        `Read operation bad response. No results array in json rpc response. Inspect smart contract`,\n      );\n    }\n    if (jsonRpcCallResult[0].result.Error) {\n      throw new Error(jsonRpcCallResult[0].result.Error);\n    }\n    return {\n      returnValue: new Uint8Array(jsonRpcCallResult[0].result[0].result.Ok),\n      info: jsonRpcCallResult[0],\n    };\n  }\n}\n"]}