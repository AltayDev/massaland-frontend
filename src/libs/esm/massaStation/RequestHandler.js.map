{"version":3,"file":"RequestHandler.js","sourceRoot":"","sources":["../../../src/massaStation/RequestHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file defines a TypeScript module with methods for performing GET, POST and DELETE http requests.\n *\n * @remarks\n * - The methods implemented here are quite generic and might be useful in other contexts too\n *  but have been particularly developed for making http calls specific to MassaStation's server API\n * - If you want to work on this repo, you will probably be interested in this object\n *\n */\nimport axios, { AxiosResponse, AxiosRequestHeaders } from 'axios';\n\nconst requestHeaders = {\n  Accept:\n    'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  'Content-Type': 'application/json',\n} as AxiosRequestHeaders;\n/**\n * This interface represents a payload returned by making an http call\n */\nexport interface JsonRpcResponseData<T> {\n  isError: boolean;\n  result: T | null;\n  error: Error | null;\n}\n\n/**\n * This method makes a GET request to an http rest point.\n *\n *\n * @param url - The url to call.\n * @returns a Promise that resolves to an instance of JsonRpcResponseData.\n *\n */\nexport async function getRequest<T>(\n  url: string,\n  timeout: number = null,\n): Promise<JsonRpcResponseData<T>> {\n  let resp: AxiosResponse = null;\n  try {\n    resp = await axios.get<unknown, AxiosResponse, object>(url, {\n      headers: requestHeaders,\n      timeout,\n    });\n  } catch (ex) {\n    return {\n      isError: true,\n      result: null,\n      error: new Error('Axios Error: ' + String(ex)),\n    } as JsonRpcResponseData<T>;\n  }\n\n  return {\n    isError: false,\n    result: resp.data as T,\n    error: null,\n  } as JsonRpcResponseData<T>;\n}\n\n/**\n * This method makes a POST request to an http rest point.\n *\n *\n * @param url - The url to call.\n * @param body - The body of the request.\n * @returns a Promise that resolves to an instance of JsonRpcResponseData.\n *\n */\nexport async function postRequest<T>(\n  url: string,\n  body: object,\n): Promise<JsonRpcResponseData<T>> {\n  try {\n    const resp = await axios.post<unknown, AxiosResponse, object>(url, body, {\n      headers: requestHeaders,\n    });\n\n    return {\n      isError: false,\n      result: resp.data as T,\n      error: null,\n    } as JsonRpcResponseData<T>;\n  } catch (ex) {\n    return {\n      isError: true,\n      result: null,\n      error: ex.response?.data?.message\n        ? new Error(String(ex.response.data.message))\n        : new Error('Axios error: ' + String(ex)),\n    } as JsonRpcResponseData<T>;\n  }\n}\n\n/**\n * This method makes a DELETE request to an http rest point.\n *\n *\n * @param url - The url to call.\n * @returns a Promise that resolves to an instance of JsonRpcResponseData.\n *\n */\nexport async function deleteRequest<T>(\n  url: string,\n): Promise<JsonRpcResponseData<T>> {\n  let resp: AxiosResponse = null;\n  try {\n    resp = await axios.delete<unknown, AxiosResponse, object>(url, {\n      headers: requestHeaders,\n    });\n  } catch (ex) {\n    return {\n      isError: true,\n      result: null,\n      error: new Error('Axios Error: ' + String(ex)),\n    } as JsonRpcResponseData<T>;\n  }\n\n  return {\n    isError: false,\n    result: resp.data as T,\n    error: null,\n  } as JsonRpcResponseData<T>;\n}\n\n/**\n * This method makes a PUT request to an http rest point.\n *\n *\n * @param url - The url to call.\n * @param body - The body of the request.\n * @returns a Promise that resolves to an instance of JsonRpcResponseData.\n *\n */\nexport async function putRequest<T>(\n  url: string,\n  body: object,\n): Promise<JsonRpcResponseData<T>> {\n  let resp: AxiosResponse = null;\n  try {\n    resp = await axios.put<unknown, AxiosResponse, object>(url, body, {\n      headers: requestHeaders,\n    });\n  } catch (ex) {\n    return {\n      isError: true,\n      result: null,\n      error: new Error('Axios error: ' + String(ex)),\n    } as JsonRpcResponseData<T>;\n  }\n\n  return {\n    isError: false,\n    result: resp.data as T,\n    error: null,\n  } as JsonRpcResponseData<T>;\n}\n"]}