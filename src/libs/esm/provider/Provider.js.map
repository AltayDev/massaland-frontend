{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../../src/provider/Provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IAccountDeletionRequest,\n  IAccountDeletionResponse,\n} from './AccountDeletion';\nimport { IAccountImportRequest, IAccountImportResponse } from './AccountImport';\nimport { connector } from '../connector/Connector';\nimport { Account } from '../account/Account';\nimport { AvailableCommands } from '..';\nimport { IAccountDetails } from '../account/IAccountDetails';\nimport { IProvider } from './IProvider';\nimport { IAccount } from '../account/IAccount';\nimport { IAccountGenerationRequest } from './AccoutGeneration';\n\n/**\n * The Provider class provides a simple and intuitive interface for interacting with a specific\n * wallet service.\n *\n */\nexport class Provider implements IProvider {\n  private providerName: string;\n\n  /**\n   * Provider constructor\n   *\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Provider class.\n   */\n  public constructor(providerName: string) {\n    this.providerName = providerName;\n  }\n\n  /**\n   * This method returns the name of the provider.\n   * @returns The name of the provider.\n   */\n  public name(): string {\n    return this.providerName;\n  }\n\n  /**\n   * This method sends a message to the content script to get the list of accounts for the provider.\n   * It returns a Promise that resolves to an array of Account instances.\n   *\n   * @returns A promise that resolves to an array of Account instances.\n   */\n  public async accounts(): Promise<IAccount[]> {\n    const providersPromise = new Promise<IAccountDetails[]>(\n      (resolve, reject) => {\n        connector.sendMessageToContentScript(\n          this.providerName,\n          AvailableCommands.ProviderListAccounts,\n          {},\n          (result, err) => {\n            if (err) return reject(err);\n            return resolve(result as IAccountDetails[]);\n          },\n        );\n      },\n    );\n\n    const providerAccounts: IAccountDetails[] = await providersPromise;\n\n    let accounts: Account[] = [];\n    for (const providerAccount of providerAccounts) {\n      const accInstance = new Account(providerAccount, this.providerName);\n      accounts.push(accInstance);\n    }\n\n    return accounts;\n  }\n\n  /**\n   * This method sends a message to the content script to import an account with the given publicKey and privateKey.\n   *\n   * @remarks\n   * - The IAccountImportResponse object contains the address of the imported account.\n   * - The address is generated from the public key.\n   *\n   * @param publicKey - The public key of the account.\n   * @param privateKey - The private key of the account.\n   * @returns a Promise that resolves to an instance of IAccountImportResponse.\n   *\n   */\n  public async importAccount(\n    publicKey: string,\n    privateKey: string,\n  ): Promise<IAccountImportResponse> {\n    const accountImportRequest = {\n      publicKey,\n      privateKey,\n    } as IAccountImportRequest;\n    return new Promise<IAccountImportResponse>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this.providerName,\n        AvailableCommands.ProviderImportAccount,\n        accountImportRequest,\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as IAccountImportResponse);\n        },\n      );\n    });\n  }\n\n  /**\n   * This method sends a message to the content script to delete the account associated with the given address.\n   *\n   * @param address - The address of the account.\n   * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n   */\n  public async deleteAccount(\n    address: string,\n  ): Promise<IAccountDeletionResponse> {\n    const accountDeletionRequest = { address } as IAccountDeletionRequest;\n    return new Promise<IAccountDeletionResponse>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this.providerName,\n        AvailableCommands.ProviderDeleteAccount,\n        accountDeletionRequest,\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as IAccountDeletionResponse);\n        },\n      );\n    });\n  }\n\n  /**\n   * This method sends a message to the content script to get the list of nodes urls\n   * used to connect the front end to the Massa network.\n   *\n   * @returns a Promise that resolves to an array of nodes urls (string).\n   *\n   */\n  public async getNodesUrls(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this.providerName,\n        AvailableCommands.ProviderGetNodesUrls,\n        {},\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as string[]);\n        },\n      );\n    });\n  }\n\n  /**\n   * Returns the name of the network the provider is connected to.\n   *\n   * @returns a Promise that resolves to the network name (string).\n   */\n  public async getNetwork(): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this.providerName,\n        AvailableCommands.ProviderGetNetwork,\n        {},\n        (result, err) => {\n          if (err) return reject(err);\n          else if (typeof result !== 'string') {\n            return reject(\n              new Error(`Expected a string but got ${typeof result} instead`),\n            );\n          }\n          return resolve(result);\n        },\n      );\n    });\n  }\n\n  /**\n   * This method generates a new account by a given name and adds it to the wallet.\n   *\n   * @param name - The account name\n   * @returns a Promise that resolves to an instance of IAccountDetails.\n   */\n  public async generateNewAccount(name?: string): Promise<IAccountDetails> {\n    const accountGenerationRequest = { name } as IAccountGenerationRequest;\n    return new Promise<IAccountDetails>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this.providerName,\n        AvailableCommands.ProviderGenerateNewAccount,\n        accountGenerationRequest,\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as IAccountDetails);\n        },\n      );\n    });\n  }\n\n  public listenAccountChanges(\n    callback: (address: string) => void,\n  ): { unsubscribe: () => void } | undefined {\n    throw new Error(\n      'listenAccountChanges is not yet implemented for the current provider.',\n    );\n  }\n\n  public listenNetworkChanges(\n    callback: (network: string) => void,\n  ): { unsubscribe: () => void } | undefined {\n    throw new Error(\n      'listenNetworkChanges is not yet implemented for the current provider.',\n    );\n  }\n\n  public async connect(): Promise<boolean> {\n    throw new Error(\n      'connect functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public async disconnect(): Promise<boolean> {\n    throw new Error(\n      'disconnect functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public connected(): boolean {\n    throw new Error(\n      'connected functionality is not yet implemented for the current provider.',\n    );\n  }\n\n  public enabled(): boolean {\n    throw new Error(\n      'enabled functionality is not yet implemented for the current provider.',\n    );\n  }\n}\n"]}