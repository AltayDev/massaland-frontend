{"version":3,"file":"Connector.js","sourceRoot":"","sources":["../../../src/connector/Connector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This file defines a TypeScript module named connector.\n * It is the tool that allows the 'provider' and 'account' objects to communicate with the web page script.\n *\n * @remarks\n * - If you are only looking to use our library, the connector object will not be useful to you.\n * - If you want to work on this repo, you will probably be interested in this object\n *\n */\nimport { uid } from 'uid';\nimport { ICustomEventMessageResponse } from './ICustomEventMessageResponse';\nimport { ICustomEventMessageRequest } from './ICustomEventMessageRequest';\nimport { IRegisterEvent } from './IRegisterEvent';\nimport {\n  AvailableCommands,\n  IAccountBalanceRequest,\n  IAccountBalanceResponse,\n  IAccountDeletionRequest,\n  IAccountDeletionResponse,\n  IAccountImportRequest,\n  IAccountImportResponse,\n  IAccountSignRequest,\n  IAccountSignResponse,\n} from '..';\nimport {\n  ON_MASSA_STATION_DISCOVERED,\n  ON_MASSA_STATION_DISCONNECTED,\n  MassaStationDiscovery,\n} from '../massaStation/MassaStationDiscovery';\nimport { MASSA_STATION_PROVIDER_NAME } from '../massaStation/MassaStationProvider';\nimport { IAccount } from '../account/IAccount';\nimport { PluginInfo } from '../massaStation/types';\n\n/**\n * A constant string that is used to identify the HTML element that is used for\n * communication between the web page script and the content script.\n */\nexport const MASSA_WINDOW_OBJECT = 'massaWalletProvider';\n\ntype CallbackFunction = (\n  result: AllowedResponses,\n  error: Error | null,\n) => unknown;\n\nexport type AllowedRequests =\n  | object\n  | IAccountBalanceRequest\n  | IAccountSignRequest\n  | IAccountImportRequest\n  | IAccountDeletionRequest;\n\nexport type AllowedResponses =\n  | object\n  | IAccountBalanceResponse\n  | IAccountSignResponse\n  | IAccountImportResponse\n  | IAccountDeletionResponse\n  | IAccount[]\n  | string;\n\n/**\n * This class enables communication with the content script by sending and receiving messages.\n * @remarks\n * - This class is used to send messages to the content script and to receive messages from the content script.\n * - It is used to send messages to the content script and to receive messages from the content script.\n *\n */\nclass Connector {\n  private registeredProviders: Record<string, string> = {};\n  private pendingRequests: Map<string, CallbackFunction>;\n  private massaStationListener: MassaStationDiscovery;\n\n  private providersInfo: Record<string, PluginInfo> = {};\n\n  /**\n   * Connector constructor\n   *\n   * @remarks\n   * - The Connector constructor takes no arguments.\n   * - It creates a Map object that is used to store pending requests.\n   * - It creates an HTML element that is used to communicate with the content script.\n   * - It adds an event listener to the HTML element that is used to communicate with the content script.\n   *\n   * @returns An instance of the Connector class.\n   *\n   */\n  public constructor() {\n    if (typeof document !== 'undefined') {\n      this.pendingRequests = new Map<string, CallbackFunction>();\n      this.massaStationListener = new MassaStationDiscovery();\n      this.initMassaStationListener();\n      this.register();\n\n      // start listening to messages from content script\n      document\n        .getElementById(MASSA_WINDOW_OBJECT)\n        .addEventListener(\n          'message',\n          this.handleResponseFromContentScript.bind(this),\n        );\n    }\n  }\n\n  /**\n   * This method adds a register listener in the web page.\n   * It listens to the 'register' event.\n   *\n   * @returns void\n   *\n   * @remarks\n   * - It is used to register a new provider.\n   * - This method creates a new HTML element and a listener that listens to the register event.\n   *\n   */\n  private register() {\n    // global event target to use for all wallet provider\n    // check if document exist\n    if (typeof document !== 'undefined') {\n      if (!document.getElementById(MASSA_WINDOW_OBJECT)) {\n        const inv = document.createElement('p');\n        inv.id = MASSA_WINDOW_OBJECT;\n        inv.setAttribute('style', 'display:none');\n        document.body.appendChild(inv);\n      }\n\n      // add an invisible HTML element and set a listener to it like the following\n      // hook up register handler\n      document\n        .getElementById(MASSA_WINDOW_OBJECT)\n        .addEventListener('register', (evt: CustomEvent) => {\n          const payload: IRegisterEvent = evt.detail;\n          const providerEventTargetName = `${MASSA_WINDOW_OBJECT}_${payload.providerName}`;\n          this.registeredProviders[payload.providerName] =\n            providerEventTargetName;\n        });\n    }\n  }\n\n  private initMassaStationListener() {\n    this.massaStationListener.on(\n      ON_MASSA_STATION_DISCOVERED,\n      (walletModule: PluginInfo) => {\n        this.registeredProviders[\n          MASSA_STATION_PROVIDER_NAME\n        ] = `${MASSA_WINDOW_OBJECT}_${MASSA_STATION_PROVIDER_NAME}`;\n\n        this.providersInfo[MASSA_STATION_PROVIDER_NAME] = walletModule;\n      },\n    );\n    this.massaStationListener.on(ON_MASSA_STATION_DISCONNECTED, () => {\n      delete this.registeredProviders[MASSA_STATION_PROVIDER_NAME];\n    });\n  }\n\n  public async startMassaStationDiscovery() {\n    try {\n      await this.massaStationListener.startListening();\n    } catch (e) {\n      console.log('get MassaStation provider error: ', e);\n    }\n  }\n\n  /**\n   * This method sends a message from the webpage script to the content script.\n   *\n   * @remarks\n   * Sends a message to the content script using the specified provider name, command, and parameters,\n   *\n   * @privateRemarks\n   * This method registers the response callback with a unique ID.\n   *\n   * @param providerName - The name of the provider.\n   * @param command - The command that is sent to the content script (among the {@link AvailableCommands}).\n   * @param params - The parameters that are sent to the content script.\n   * @param responseCallback - The callback function that is called when the content script sends a response.\n   * @returns void\n   *\n   */\n\n  public sendMessageToContentScript(\n    providerName: string,\n    command: AvailableCommands,\n    params: AllowedRequests,\n    responseCallback: CallbackFunction,\n  ) {\n    if (!Object.values(AvailableCommands).includes(command)) {\n      throw new Error(`Unknown command ${command}`);\n    }\n\n    const requestId = uid();\n    const eventMessageRequest: ICustomEventMessageRequest = {\n      params,\n      requestId,\n    };\n    this.pendingRequests.set(requestId, responseCallback);\n\n    // dispatch an event to the specific provider event target\n    const specificProviderEventTarget = document?.getElementById(\n      `${this.registeredProviders[providerName]}`,\n    ) as EventTarget;\n    if (!specificProviderEventTarget) {\n      throw new Error(\n        `Registered provider with name ${providerName} does not exist`,\n      );\n    }\n    const isDispatched = specificProviderEventTarget.dispatchEvent(\n      new CustomEvent(command, { detail: eventMessageRequest }),\n    );\n    if (!isDispatched) {\n      throw new Error(\n        `Could not dispatch a message to ${this.registeredProviders[providerName]}`,\n      );\n    }\n  }\n\n  /**\n   * This method returns the registered providers.\n   *\n   * @returns The registered provider associated with its unique key.\n   *\n   */\n  public getWalletProviders(): Record<string, string> {\n    return this.registeredProviders;\n  }\n\n  /**\n   * This method returns the provider wallet info.\n   *\n   */\n  public getProviderInfo(providerName: string): PluginInfo | undefined {\n    return this.providersInfo[providerName];\n  }\n\n  /**\n   * This method handles the response from the content script by\n   * calling the response callback with the response and error objects.\n   *\n   * @param event - The event that is sent from the content script.\n   * @returns void\n   *\n   */\n  private handleResponseFromContentScript(event: CustomEvent) {\n    const { result, error, requestId }: ICustomEventMessageResponse =\n      event.detail;\n\n    const responseCallback: CallbackFunction =\n      this.pendingRequests.get(requestId);\n\n    if (responseCallback) {\n      if (error) {\n        responseCallback(null, new Error(error.message));\n      } else {\n        responseCallback(result, null);\n      }\n      const deleted = this.pendingRequests.delete(requestId);\n      if (!deleted) {\n        console.error(`Error deleting a pending request with id ${requestId}`);\n      }\n    } else {\n      console.error(\n        `Request Id ${requestId} not found in response callback map`,\n      );\n    }\n  }\n}\n\nexport const connector = new Connector();\n"]}