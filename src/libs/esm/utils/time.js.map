{"version":3,"file":"time.js","sourceRoot":"","sources":["../../../src/utils/time.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH;;;;GAIG;AACH,MAAM,OAAO,OAAO;IAClB;;;;;;OAMG;IACH,YAAY,UAAkB,EAAE,QAAoB;QAClD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,QAAQ,EAAE,CAAC;aACZ;QACH,CAAC,EAAE,UAAU,CAAC,CAAC;IACjB,CAAC;IACO,SAAS,CAAU;IACnB,QAAQ,CAAU;IAClB,WAAW,CAAe;IAElC;;;;OAIG;IACI,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACvB;IACH,CAAC;CACF;AAED;;;;;GAKG;AACH,MAAM,OAAO,QAAQ;IACnB;;;;;;OAMG;IACH,YAAY,UAAkB,EAAE,QAAoB;QAClD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,QAAQ,EAAE,CAAC;aACZ;QACH,CAAC,EAAE,UAAU,CAAC,CAAC;IACjB,CAAC;IACO,SAAS,CAAU;IACnB,QAAQ,CAAU;IAClB,YAAY,CAAe;IAEnC;;;;OAIG;IACI,KAAK;QACV,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACvB;IACH,CAAC;CACF;AAED;;;;;GAKG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,EAAE,SAAiB,EAAiB,EAAE;IAC7D,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,SAAS,EAAE,GAAG,EAAE;YAC1C,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,OAAmB,EACnB,SAAiB;IAEjB,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC5C,UAAU,CACR,GAAG,EAAE,CACH,MAAM,CACJ,IAAI,KAAK,CACP,cAAc,SAAS,yCAAyC,CACjE,CACF,EACH,SAAS,CACV,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAe,CAAC;AACtD,CAAC","sourcesContent":["/**\n * This file defines a TypeScript module with various time-related Typescript methods.\n *\n * @remarks\n * - The classes and their methods implemented here are quite generic and might be useful in other contexts too\n *  but have been particularly developed for the purposes of this library\n * - If you want to work on this repo, you will probably be interested in this object\n *\n */\n\n/**\n * This class provides an implementation of a timer calling a callback hook after it ticks.\n * @remarks\n * The timer is being resetted only after the execution of the callback method has finished\n */\nexport class Timeout {\n  /**\n   * Timeout constructor\n   *\n   * @param timeoutMil - The number of milliseconds for the timeout.\n   * @param callback - a callback to execute.\n   * @returns An instance of the Timeout class.\n   */\n  constructor(timeoutMil: number, callback: () => void) {\n    this.clear = this.clear.bind(this);\n\n    const that = this;\n    this.isCleared = false;\n    this.isCalled = false;\n    this.timeoutHook = setTimeout(() => {\n      if (!that.isCleared) {\n        this.isCalled = true;\n        callback();\n      }\n    }, timeoutMil);\n  }\n  private isCleared: boolean;\n  private isCalled: boolean;\n  private timeoutHook: NodeJS.Timer;\n\n  /**\n   * A method to clear the timeout\n   *\n   * @returns void\n   */\n  public clear(): void {\n    if (!this.isCleared) {\n      clearTimeout(this.timeoutHook);\n      this.isCleared = true;\n    }\n  }\n}\n\n/**\n * This class provides an implementation of a continuous timer calling a callback hook after every given milliseconds.\n * @remarks\n * The timer is being resetted every given milliseconds\n * irregardless whether the execution of the method is still running or not\n */\nexport class Interval {\n  /**\n   * Interval constructor\n   *\n   * @param timeoutMil - The number of milliseconds for the interval.\n   * @param callback - a callback to execute.\n   * @returns An instance of the Interval class.\n   */\n  constructor(timeoutMil: number, callback: () => void) {\n    this.clear = this.clear.bind(this);\n\n    const that = this;\n    this.isCleared = false;\n    this.isCalled = false;\n    this.intervalHook = setInterval(() => {\n      if (!that.isCleared) {\n        this.isCalled = true;\n        callback();\n      }\n    }, timeoutMil);\n  }\n  private isCleared: boolean;\n  private isCalled: boolean;\n  private intervalHook: NodeJS.Timer;\n\n  /**\n   * A method to clear the interval\n   *\n   * @returns void\n   */\n  public clear(): void {\n    if (!this.isCleared) {\n      clearInterval(this.intervalHook);\n      this.isCleared = true;\n    }\n  }\n}\n\n/**\n * A function that waits pauses the execution loop for a number of milliseconds\n *\n * @param timeMilli - The number of milliseconds to wait.\n * @returns void\n */\nexport const wait = async (timeMilli: number): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    const timeout = new Timeout(timeMilli, () => {\n      timeout.clear();\n      return resolve();\n    });\n  });\n};\n\n/**\n * A function that awaits a promise with a timeout.\n *\n * @param promise - a promise to execute.\n * @param timeoutMs - The number of milliseconds to wait before a timeout.\n * @returns void\n *\n * @remarks\n * The promise is being polled with a timeout. Once the timeout is reached, if not fulfilled, the error is thrown.\n */\nexport async function withTimeoutRejection<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T> {\n  const sleep = new Promise((resolve, reject) =>\n    setTimeout(\n      () =>\n        reject(\n          new Error(\n            `Timeout of ${timeoutMs} has passed and promise did not resolve`,\n          ),\n        ),\n      timeoutMs,\n    ),\n  );\n  return Promise.race([promise, sleep]) as Promise<T>;\n}\n"]}