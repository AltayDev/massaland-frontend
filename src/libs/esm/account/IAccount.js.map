{"version":3,"file":"IAccount.js","sourceRoot":"","sources":["../../../src/account/IAccount.ts"],"names":[],"mappings":"","sourcesContent":["import { ITransactionDetails } from '..';\nimport { IAccountBalanceResponse } from './AccountBalance';\nimport { IAccountSignOutput } from './AccountSign';\nimport { Args, IContractReadOperationResponse } from '@massalabs/web3-utils';\n\n/**\n * Defines the expected structure for an account.\n */\nexport interface IAccount {\n  /** Retrieves the account's address. */\n  address(): string;\n\n  /** Retrieves the account's name. */\n  name(): string;\n\n  /** Retrieves the provider's name associated with the account. */\n  providerName(): string;\n\n  /** Initiates a balance retrieval request for the account. */\n  balance(): Promise<IAccountBalanceResponse>;\n\n  /**\n   * Signs data.\n   * @param data - Data to be signed (Buffer, Uint8Array, or string).\n   */\n  sign(data: Buffer | Uint8Array | string): Promise<IAccountSignOutput>;\n\n  /**\n   * Purchases rolls.\n   * @param amount - Amount of rolls.\n   * @param fee - Fee.\n   */\n  buyRolls(amount: bigint, fee: bigint): Promise<ITransactionDetails>;\n\n  /**\n   * Sells rolls.\n   * @param amount - Amount of rolls.\n   * @param fee - Fee.\n   */\n  sellRolls(amount: bigint, fee: bigint): Promise<ITransactionDetails>;\n\n  /**\n   * Sends a transaction.\n   *\n   * @param amount - Amount to send.\n   * @param recipientAddress - Address of the recipient.\n   * @param fee - Transaction fee.\n   * @returns A promise resolving to an `ITransactionDetails` object.\n   */\n  sendTransaction(\n    amount: bigint,\n    recipientAddress: string,\n    fee: bigint,\n  ): Promise<ITransactionDetails>;\n\n  /**\n   * Calls a smart contract.\n   *\n   * @param contractAddress - Address of the smart contract.\n   * @param functionName - Name of the function to call.\n   * @param parameter - Parameters to pass to the function.\n   * @param amount - Amount of funds to send with the call.\n   * @param fee - Fee for the transaction.\n   * @param maxGas - Maximum gas to use for the transaction.\n   * @param nonPersistentExecution - Optional flag for non-persistent execution.\n   */\n  callSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Uint8Array | Args,\n    amount: bigint,\n    fee: bigint,\n    maxGas: bigint,\n    nonPersistentExecution?: boolean,\n  ): Promise<ITransactionDetails | IContractReadOperationResponse>;\n}\n"]}