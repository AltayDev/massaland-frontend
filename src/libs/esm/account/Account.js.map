{"version":3,"file":"Account.js","sourceRoot":"","sources":["../../../src/account/Account.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAccountBalanceResponse } from './AccountBalance';\nimport { IAccountSignOutput } from './AccountSign';\nimport { connector } from '../connector/Connector';\nimport { IAccountDetails } from './IAccountDetails';\nimport { AvailableCommands, ITransactionDetails } from '..';\nimport { IAccount } from './IAccount';\nimport { Args, IContractReadOperationResponse } from '@massalabs/web3-utils';\n\n/**\n * The Account class represents a wallet account. It provides methods for interacting\n * with the account's balance and for signing messages.\n */\nexport class Account implements IAccount {\n  private _providerName: string;\n  private _address: string;\n  private _name: string;\n\n  /**\n   * Initializes a new instance of the Account class.\n   *\n   * @param address - Account address.\n   * @param name - Account name.\n   * @param providerName - Blockchain provider name.\n   *\n   * @remarks\n   * - Utilizes  IAccountDetails for account information and a providerName string for blockchain interaction.\n   * - The providerName string identifies the provider that is used to interact with the blockchain.\n   */\n\n  public constructor({ address, name }: IAccountDetails, providerName: string) {\n    this._address = address;\n    this._name = name ?? '';\n    this._providerName = providerName;\n  }\n\n  /**\n   * @returns The address of the account.\n   */\n  public address(): string {\n    return this._address;\n  }\n\n  /**\n   * @returns The name of the account.\n   */\n  public name(): string {\n    return this._name;\n  }\n\n  /**\n   * @returns The name of the provider.\n   */\n  public providerName(): string {\n    return this._providerName;\n  }\n\n  /**\n   * Retrieves the account balance.\n   *\n   * @returns A promise that resolves to an object of type  IAccountBalanceResponse.\n   */\n  public async balance(): Promise<IAccountBalanceResponse> {\n    return new Promise<IAccountBalanceResponse>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountBalance,\n        { address: this._address },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as IAccountBalanceResponse);\n        },\n      );\n    });\n  }\n\n  /**\n   * Signs a provided message.\n   *\n   * @param data - Message to sign.\n   * @returns An  IAccountSignOutput object which contains the signature and the public key.\n   */\n  public async sign(data: Buffer | Uint8Array): Promise<IAccountSignOutput> {\n    return new Promise<IAccountSignOutput>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountSign,\n        { address: this._address, data },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as IAccountSignOutput);\n        },\n      );\n    });\n  }\n\n  /**\n   * Purchases rolls for the sender.\n   *\n   * @param amount - Number of rolls to purchase.\n   * @param fee - Transaction execution fee (in smallest unit).\n   * @returns A promise resolving to an  ITransactionDetails containing the network operation ID.\n   */\n  public async buyRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    return new Promise<ITransactionDetails>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountBuyRolls,\n        {\n          amount: amount.toString(),\n          fee: fee.toString(),\n        },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as ITransactionDetails);\n        },\n      );\n    });\n  }\n\n  /**\n   * Sells rolls on behalf of the sender.\n   *\n   * @param amount - Number of rolls to sell.\n   * @param fee - Transaction execution fee  (in smallest unit).\n   * @returns A promise resolving to an  ITransactionDetails containing the network operation ID.\n   */\n  public async sellRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    return new Promise<ITransactionDetails>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountSellRolls,\n        {\n          amount: amount.toString(),\n          fee: fee.toString(),\n        },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as ITransactionDetails);\n        },\n      );\n    });\n  }\n\n  /**\n   * Transfers MAS from the sender to a recipient.\n   *\n   * @param amount - Amount of MAS to transfer (in smallest unit).\n   * @param recipientAddress - Recipient's address.\n   * @param fee - Transaction execution fee (in smallest unit).\n   *\n   * @returns A promise resolving to an  ITransactionDetails containing the network operation ID.\n   */\n  public async sendTransaction(\n    amount: bigint,\n    recipientAddress: string,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    return new Promise<ITransactionDetails>((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountSendTransaction,\n        {\n          amount: amount.toString(),\n          recipientAddress,\n          fee: fee.toString(),\n        },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(result as ITransactionDetails);\n        },\n      );\n    });\n  }\n\n  /**\n   * Interacts with a smart contract on the MASSA blockchain.\n   *\n   * @remarks\n   * If dryRun is true, performs a dry run and returns an  IContractReadOperationResponse with dry run details.\n   *\n   * @param contractAddress - Smart contract address.\n   * @param functionName - Function name to call.\n   * @param parameter - Function parameters.\n   * @param amount - Amount of MASSA coins to send (in smallest unit).\n   * @param fee - Transaction execution fee (in smallest unit).\n   * @param maxGas - Maximum gas for transaction execution.\n   * @param nonPersistentExecution - Whether to perform a dry run.\n   *\n   * @returns A promise resolving to either:\n   *  IContractReadOperationResponse (for dry runs) or ITransactionDetails (for actual transactions).\n   */\n  public async callSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Uint8Array | Args,\n    amount: bigint,\n    fee: bigint,\n    maxGas: bigint,\n    nonPersistentExecution = false,\n  ): Promise<ITransactionDetails | IContractReadOperationResponse> {\n    return new Promise((resolve, reject) => {\n      connector.sendMessageToContentScript(\n        this._providerName,\n        AvailableCommands.AccountCallSC,\n        {\n          nickname: this._name,\n          name: functionName,\n          at: contractAddress,\n          args: parameter,\n          coins: amount,\n          fee: fee,\n          maxGas: maxGas,\n          nonPersistentExecution: nonPersistentExecution,\n        },\n        (result, err) => {\n          if (err) return reject(err);\n          return resolve(\n            nonPersistentExecution\n              ? (result as IContractReadOperationResponse)\n              : (result as ITransactionDetails),\n          );\n        },\n      );\n    });\n  }\n}\n"]}