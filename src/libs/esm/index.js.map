{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/** Polyfills */\nimport { Buffer } from 'buffer';\n\ndeclare global {\n  interface Window {\n    Buffer: typeof Buffer;\n    bearby?: unknown;\n  }\n}\n\n// Check if we are on browser\nif (typeof window !== 'undefined') {\n  window.Buffer = Buffer;\n}\n\nimport { MASSA_WINDOW_OBJECT, connector } from './connector/Connector';\nimport { IProvider } from './provider/IProvider';\nimport { Provider } from './provider/Provider';\nimport {\n  MASSA_STATION_PROVIDER_NAME,\n  MassaStationProvider,\n} from './massaStation/MassaStationProvider';\nimport { detectBearby } from './bearbyWallet/BearbyConnect';\nimport { BearbyProvider } from './bearbyWallet/BearbyProvider';\nimport { wait } from './utils/time';\n\nexport enum AvailableCommands {\n  ProviderListAccounts = 'LIST_ACCOUNTS',\n  ProviderDeleteAccount = 'DELETE_ACCOUNT',\n  ProviderImportAccount = 'IMPORT_ACCOUNT',\n  ProviderGetNodesUrls = 'GET_NODES_URLS',\n  ProviderGetNetwork = 'GET_NETWORK',\n  AccountBalance = 'ACCOUNT_BALANCE',\n  AccountSign = 'ACCOUNT_SIGN',\n  ProviderGenerateNewAccount = 'GENERATE_NEW_ACCOUNT',\n  AccountSellRolls = 'ACCOUNT_SELL_ROLLS',\n  AccountBuyRolls = 'ACCOUNT_BUY_ROLLS',\n  AccountSendTransaction = 'ACCOUNT_SEND_TRANSACTION',\n  AccountCallSC = 'ACCOUNT_CALL_SC',\n}\n\nexport interface ITransactionDetails {\n  operationId: string;\n}\n\n/**\n * Get the list of providers that are available to interact with.\n *\n * @param retry - If true, will retry to get the list of providers if none are available.\n * @param pollInterval - The timeout in milliseconds to wait between retries. default is 2000ms.\n * @param timeout - The timeout in milliseconds to wait before giving up. default is 3000ms.\n *\n * @returns An array of providers.\n */\nexport async function providers(\n  retry = true,\n  timeout = 3000,\n  pollInterval = 500,\n): Promise<IProvider[]> {\n  const startTime = Date.now();\n\n  await connector.startMassaStationDiscovery();\n\n  let bearby: BearbyProvider | undefined;\n  if (await detectBearby()) {\n    bearby = new BearbyProvider('BEARBY');\n  }\n\n  while (Date.now() - startTime < timeout) {\n    const providerInstances: IProvider[] = getProviderInstances();\n\n    if (bearby) providerInstances.push(bearby);\n\n    if (!retry || providerInstances.length > 0) {\n      return providerInstances;\n    }\n\n    await wait(pollInterval);\n  }\n\n  return [];\n}\n\nfunction getProviderInstances() {\n  const availableProviders = Object.keys(connector.getWalletProviders());\n\n  const providerInstances: IProvider[] = availableProviders.map(\n    (providerName) => {\n      if (providerName === MASSA_STATION_PROVIDER_NAME) {\n        return new MassaStationProvider(\n          connector.getProviderInfo(providerName),\n        );\n      } else {\n        return new Provider(providerName);\n      }\n    },\n  );\n  return providerInstances;\n}\n\n/**\n * Manually register a provider to interact with.\n *\n * @param name - The name of the provider.\n * @param id - The id of the HTML element that is used to communicate with the provider.\n */\nexport function registerProvider(name: string, id = MASSA_WINDOW_OBJECT): void {\n  if (typeof document !== 'undefined') {\n    const registerEvent = new CustomEvent('register', {\n      detail: { providerName: name },\n    });\n    const element = document?.getElementById(id);\n    if (element) {\n      element.dispatchEvent(registerEvent);\n    }\n  }\n}\n\nexport async function getProviderByName(\n  providerName: string,\n): Promise<IProvider | undefined> {\n  const providersList = await providers();\n  return providersList.find((p) => p.name() === providerName);\n}\n\nexport { AllowedRequests, AllowedResponses } from './connector';\n\nexport {\n  IAccountDetails,\n  IAccountBalanceRequest,\n  IAccountBalanceResponse,\n  IAccountSignRequest,\n  IAccountSignResponse,\n  IAccount,\n  Account,\n  IAccountRollsRequest,\n  IAccountSendTransactionRequest,\n  IAccountCallSCRequest,\n} from './account';\n\nexport {\n  EAccountDeletionResponse,\n  EAccountImportResponse,\n  IAccountDeletionRequest,\n  IAccountDeletionResponse,\n  IAccountImportRequest,\n  IAccountImportResponse,\n  IProvider,\n  Provider,\n} from './provider';\n\nexport { IMassaStationWallet } from './massaStation/MassaStationProvider';\n\nexport { MassaStationAccount } from './massaStation/MassaStationAccount';\n\nexport { connectBearby, disconnectBearby } from './bearbyWallet/BearbyConnect';\n"]}