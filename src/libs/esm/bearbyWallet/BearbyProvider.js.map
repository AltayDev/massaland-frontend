{"version":3,"file":"BearbyProvider.js","sourceRoot":"","sources":["../../../src/bearbyWallet/BearbyProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAOzC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,MAAM,OAAO,cAAc;IACjB,YAAY,CAAS;IAE7B;;;;;OAKG;IACH,YAAmB,YAAoB;QACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,8BAA8B;QAC9B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YAC1B,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;SAC7B;QAED,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM;YACzC,IAAI,EAAE,QAAQ;SACf,CAAC;QACF,OAAO,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,SAAiB,EACjB,UAAkB;QAElB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,OAAe;QAEf,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,OAAO,CAAC,mCAAmC,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAE1C,OAAO,OAAO,CAAC,GAAG,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,IAAY;QAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,oBAAoB,CAAC,QAAkC;QAG5D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACrE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,oBAAoB,CAAC,QAAmC;QAG7D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,OAAO;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;CACF","sourcesContent":["import { web3 } from '@hicaru/bearby.js';\nimport { IAccount, IAccountDetails } from '../account';\nimport {\n  IAccountDeletionResponse,\n  IAccountImportResponse,\n  IProvider,\n} from '../provider';\nimport { BearbyAccount } from './BearbyAccount';\n\nexport class BearbyProvider implements IProvider {\n  private providerName: string;\n\n  /**\n   * Provider constructor\n   *\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Provider class.\n   */\n  public constructor(providerName: string) {\n    this.providerName = providerName;\n  }\n\n  public name(): string {\n    return this.providerName;\n  }\n\n  public async accounts(): Promise<IAccount[]> {\n    // check if bearby is unlocked\n    if (!web3.wallet.connected) {\n      await web3.wallet.connect();\n    }\n\n    const account = {\n      address: await web3.wallet.account.base58,\n      name: 'BEARBY',\n    };\n    return [new BearbyAccount(account, this.providerName)];\n  }\n\n  public async importAccount(\n    publicKey: string,\n    privateKey: string,\n  ): Promise<IAccountImportResponse> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async deleteAccount(\n    address: string,\n  ): Promise<IAccountDeletionResponse> {\n    throw new Error('Method not implemented.');\n  }\n\n  public async getNodesUrls(): Promise<string[]> {\n    return ['https://buildnet.massa.net/api/v2'];\n  }\n\n  public async getNetwork(): Promise<string> {\n    const network = await web3.wallet.network;\n\n    return network.net;\n  }\n\n  public async generateNewAccount(name: string): Promise<IAccountDetails> {\n    throw new Error('Method not implemented.');\n  }\n\n  /**\n   * Subscribes to account changes.\n   *\n   * @param callback - Callback to be called when the account changes.\n   *\n   * @returns A promise that resolves to a function that can be called to unsubscribe.\n   *\n   * @remarks\n   * Don't forget to unsubscribe to avoid memory leaks.\n   *\n   * @example\n   * ```typescript\n   * // Subscribe\n   * const observer = await provider.listenAccountChanges((base58) => {\n   *  console.log(base58);\n   * });\n   *\n   * // Unsubscribe\n   * observer.unsubscribe();\n   * ```\n   */\n  public listenAccountChanges(callback: (base58: string) => void): {\n    unsubscribe: () => void;\n  } {\n    return web3.wallet.account.subscribe((base58) => callback(base58));\n  }\n\n  /**\n   * Subscribes to network changes.\n   *\n   * @param callback - Callback to be called when the network changes.\n   *\n   * @returns A promise that resolves to a function that can be called to unsubscribe.\n   *\n   * @remarks\n   * Don't forget to unsubscribe to avoid memory leaks.\n   *\n   * @example\n   * ```typescript\n   * // Subscribe\n   * const observer = await provider.listenNetworkChanges((network) => {\n   *  console.log(network);\n   * });\n   *\n   * // Unsubscribe\n   * observer.unsubscribe();\n   * ```\n   */\n  public listenNetworkChanges(callback: (network: string) => void): {\n    unsubscribe: () => void;\n  } {\n    return web3.wallet.network.subscribe((network) => callback(network));\n  }\n\n  /**\n   * Connects to the wallet.\n   *\n   * @remarks\n   * This method will attempt to establish a connection with the wallet.\n   * If the connection fails, it will log the error message.\n   */\n  public async connect() {\n    return web3.wallet.connect();\n  }\n\n  /**\n   * Disconnects from the wallet.\n   *\n   * @remarks\n   * This method will attempt to disconnect from the wallet.\n   * If the disconnection fails, it will log the error message.\n   */\n  public async disconnect() {\n    return web3.wallet.disconnect();\n  }\n\n  /**\n   * Checks if the wallet is connected.\n   *\n   * @returns a boolean indicating whether the wallet is connected.\n   */\n  public connected(): boolean {\n    return web3.wallet.connected;\n  }\n\n  /**\n   * Checks if the wallet is enabled.\n   *\n   * @returns a boolean indicating whether the wallet is enabled.\n   */\n  public enabled(): boolean {\n    return web3.wallet.enabled;\n  }\n}\n"]}