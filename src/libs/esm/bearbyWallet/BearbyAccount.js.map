{"version":3,"file":"BearbyAccount.js","sourceRoot":"","sources":["../../../src/bearbyWallet/BearbyAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Args,\n  IContractReadOperationData,\n  IContractReadOperationResponse,\n} from '@massalabs/web3-utils';\nimport { ITransactionDetails } from '..';\nimport { IAccountBalanceResponse, IAccountDetails } from '../account';\nimport { IAccount } from '../account/IAccount';\nimport { web3 } from '@hicaru/bearby.js';\nimport {\n  postRequest,\n  JsonRpcResponseData,\n} from '../massaStation/RequestHandler';\nimport { BalanceResponse } from './BalanceResponse';\nimport { NodeStatus } from './NodeStatus';\nimport { JSON_RPC_REQUEST_METHOD } from './jsonRpcMethods';\nimport axios, { AxiosRequestHeaders, AxiosResponse } from 'axios';\nimport { IAccountSignOutput } from '../account/AccountSign';\n/**\n * The maximum allowed gas for a read operation\n */\nconst MAX_READ_BLOCK_GAS = BigInt(4_294_967_295);\n\n/**\n * The RPC we are using to query the node\n */\nexport const PUBLIC_NODE_RPC = 'https://buildnet.massa.net/api/v2';\n\nexport enum OperationsType {\n  Payment,\n  RollBuy,\n  RollSell,\n  ExecuteSC,\n  CallSC,\n}\n\n/**\n * Associates an operation type with a number.\n */\nexport enum OperationTypeId {\n  Transaction = 0,\n  RollBuy = 1,\n  RollSell = 2,\n  ExecuteSC = 3,\n  CallSC = 4,\n}\n\nconst requestHeaders = {\n  Accept:\n    'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  'Content-Type': 'application/json',\n} as AxiosRequestHeaders;\n\nexport class BearbyAccount implements IAccount {\n  private _providerName: string;\n  private _address: string;\n  private _name: string;\n  private _nodeUrl = PUBLIC_NODE_RPC;\n\n  public constructor({ address, name }: IAccountDetails, providerName: string) {\n    this._address = address;\n    this._name = name ?? 'Bearby_account';\n    this._providerName = providerName;\n  }\n\n  public address(): string {\n    return this._address;\n  }\n\n  public name(): string {\n    return this._name;\n  }\n\n  public providerName(): string {\n    return this._providerName;\n  }\n\n  // TODO: Should be removed from account interface as it more a provider method\n  public async connect() {\n    try {\n      await web3.wallet.connect();\n    } catch (ex) {\n      console.log('Bearby connection error: ', ex);\n    }\n  }\n\n  // needs testing\n  public async balance(): Promise<IAccountBalanceResponse> {\n    await this.connect();\n    // Not available on bearby. we have to manually call the api\n    const body = {\n      jsonrpc: '2.0',\n      method: 'get_addresses',\n      params: [[this._address]],\n      id: 0,\n    };\n\n    const addressInfos = await postRequest<BalanceResponse>(\n      PUBLIC_NODE_RPC,\n      body,\n    );\n\n    if (addressInfos.isError || addressInfos.error) {\n      throw addressInfos.error.message;\n    }\n    return {\n      finalBalance: addressInfos.result.result[0].final_balance,\n      candidateBalance: addressInfos.result.result[0].candidate_balance,\n    } as IAccountBalanceResponse;\n  }\n\n  // need testing\n  public async sign(\n    data: Buffer | Uint8Array | string,\n  ): Promise<IAccountSignOutput> {\n    await this.connect();\n\n    let strData: string;\n    if (data instanceof Uint8Array) {\n      strData = new TextDecoder().decode(data);\n    }\n    if (data instanceof Buffer) {\n      strData = data.toString();\n    }\n    const signature = await web3.wallet.signMessage(strData);\n    return {\n      publicKey: signature.publicKey,\n      base58Encoded: signature.signature,\n    };\n  }\n\n  // need testing\n  public async buyRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    await this.connect();\n    const operationId = await web3.massa.buyRolls(amount.toString());\n\n    return {\n      operationId,\n    } as ITransactionDetails;\n  }\n\n  // need testing\n  public async sellRolls(\n    amount: bigint,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    await this.connect();\n    const operationId = await web3.massa.sellRolls(amount.toString());\n\n    return {\n      operationId,\n    } as ITransactionDetails;\n  }\n\n  public async sendTransaction(\n    amount: bigint,\n    recipientAddress: string,\n    fee: bigint,\n  ): Promise<ITransactionDetails> {\n    await this.connect();\n\n    const operationId = await web3.massa.payment(\n      amount.toString(),\n      recipientAddress,\n    );\n\n    return {\n      operationId,\n    } as ITransactionDetails;\n  }\n\n  public async callSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Args | Uint8Array,\n    amount: bigint,\n    fee: bigint,\n    maxGas: bigint,\n    nonPersistentExecution = false,\n  ): Promise<ITransactionDetails | IContractReadOperationResponse> {\n    await this.connect();\n    if (nonPersistentExecution) {\n      return this.nonPersistentCallSC(\n        contractAddress,\n        functionName,\n        parameter,\n        amount,\n        fee,\n        maxGas,\n      );\n    }\n\n    let unsafeParameters: Uint8Array;\n    if (parameter instanceof Uint8Array) {\n      unsafeParameters = parameter;\n    } else {\n      unsafeParameters = Uint8Array.from(parameter.serialize());\n    }\n\n    const operationId = await web3.contract.call({\n      maxGas: Number(maxGas),\n      coins: Number(amount),\n      fee: Number(fee),\n      targetAddress: contractAddress,\n      functionName: functionName,\n      unsafeParameters,\n    });\n\n    return { operationId };\n  }\n\n  /**\n   * Retrieves the node's status.\n   *\n   * @remarks\n   * The returned information includes:\n   * - Whether the node is reachable\n   * - The number of connected peers\n   * - The node's version\n   * - The node's configuration parameters\n   *\n   * @returns A promise that resolves to the node's status information.\n   */\n  public async getNodeStatus(): Promise<NodeStatus> {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_STATUS;\n    return await this.sendJsonRPCRequest<NodeStatus>(jsonRpcRequestMethod, []);\n  }\n\n  /**\n   * Sends a post JSON rpc request to the node.\n   *\n   * @param resource - The rpc method to call.\n   * @param params - The parameters to pass to the rpc method.\n   *\n   * @throws An error if the rpc method returns an error.\n   *\n   * @returns A promise that resolves as the result of the rpc method.\n   */\n  protected async sendJsonRPCRequest<T>(\n    resource: JSON_RPC_REQUEST_METHOD,\n    params: object,\n  ): Promise<T> {\n    let resp: JsonRpcResponseData<T> = null;\n    resp = await this.promisifyJsonRpcCall(resource, params);\n\n    // in case of rpc error, rethrow the error.\n    if (resp.isError || resp.error) {\n      throw resp.error;\n    }\n\n    return resp.result;\n  }\n\n  /**\n   * Converts a json rpc call to a promise that resolves as a JsonRpcResponseData\n   *\n   * @privateRemarks\n   * If there is an error while sending the request, the function catches the error, the isError\n   * property is set to true, the result property set to null, and the error property set to a\n   * new Error object with a message indicating that there was an error.\n   *\n   * @param resource - The rpc method to call.\n   * @param params - The parameters to pass to the rpc method.\n   *\n   * @returns A promise that resolves as a JsonRpcResponseData.\n   */\n  private async promisifyJsonRpcCall<T>(\n    resource: JSON_RPC_REQUEST_METHOD,\n    params: object,\n  ): Promise<JsonRpcResponseData<T>> {\n    let resp: AxiosResponse<JsonRpcResponseData<T>> = null;\n\n    const body = {\n      jsonrpc: '2.0',\n      method: resource,\n      params: params,\n      id: 0,\n    };\n\n    try {\n      resp = await axios.post(this._nodeUrl, body, { headers: requestHeaders });\n    } catch (ex) {\n      return {\n        isError: true,\n        result: null,\n        error: new Error('JSON.parse error: ' + String(ex)),\n      } as JsonRpcResponseData<T>;\n    }\n\n    const responseData: JsonRpcResponseData<T> = resp.data;\n\n    if (responseData.error) {\n      return {\n        isError: true,\n        result: null,\n        error: new Error(responseData.error.message),\n      } as JsonRpcResponseData<T>;\n    }\n\n    return {\n      isError: false,\n      result: responseData.result as T,\n      error: null,\n    } as JsonRpcResponseData<T>;\n  }\n\n  public async nonPersistentCallSC(\n    contractAddress: string,\n    functionName: string,\n    parameter: Uint8Array | Args,\n    amount: bigint,\n    fee: bigint,\n    maxGas: bigint,\n  ): Promise<IContractReadOperationResponse> {\n    // not clean but bearby doesn't allow us to get its node urls\n    const node = PUBLIC_NODE_RPC;\n    // Gas amount check\n    if (maxGas > MAX_READ_BLOCK_GAS) {\n      throw new Error(\n        `\n        The gas submitted ${maxGas.toString()} exceeds the max. allowed block gas of \n        ${MAX_READ_BLOCK_GAS.toString()}\n        `,\n      );\n    }\n\n    // convert parameter to an array of numbers\n    let argumentArray = [];\n    if (parameter instanceof Uint8Array) {\n      argumentArray = Array.from(parameter);\n    } else {\n      argumentArray = Array.from(parameter.serialize());\n    }\n    // setup the request body\n    const data = {\n      max_gas: Number(maxGas),\n      target_address: contractAddress,\n      target_function: functionName,\n      parameter: argumentArray,\n      caller_address: this._address,\n      coins: Number(amount),\n      fee: Number(fee),\n    };\n    const body = [\n      {\n        jsonrpc: '2.0',\n        method: 'execute_read_only_call',\n        params: [[data]],\n        id: 0,\n      },\n    ];\n    // returns operation ids\n    let jsonRpcCallResult: Array<IContractReadOperationData> = [];\n    try {\n      let resp = await postRequest<Array<IContractReadOperationData>>(\n        node,\n        body,\n      );\n      if (resp.isError || resp.error) {\n        throw resp.error.message;\n      }\n      jsonRpcCallResult = resp.result;\n    } catch (ex) {\n      throw new Error(\n        `MassaStation account: error while interacting with smart contract: ${ex}`,\n      );\n    }\n    if (jsonRpcCallResult.length <= 0) {\n      throw new Error(\n        `Read operation bad response. No results array in json rpc response. Inspect smart contract`,\n      );\n    }\n    if (jsonRpcCallResult[0].result.Error) {\n      throw new Error(jsonRpcCallResult[0].result.Error);\n    }\n    return {\n      returnValue: new Uint8Array(jsonRpcCallResult[0].result[0].result.Ok),\n      info: jsonRpcCallResult[0],\n    };\n  }\n}\n"]}